{"remainingRequest":"C:\\dev\\farming-forum\\node_modules\\babel-loader\\lib\\index.js!C:\\dev\\farming-forum\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\dev\\farming-forum\\src\\store\\modules\\auth.js","dependencies":[{"path":"C:\\dev\\farming-forum\\src\\store\\modules\\auth.js","mtime":1639942763204},{"path":"C:\\dev\\farming-forum\\babel.config.js","mtime":1638558199793},{"path":"C:\\dev\\farming-forum\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\dev\\farming-forum\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\dev\\farming-forum\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/dev/farming-forum/src/store/modules/auth.js"],"names":["GoogleAuthProvider","createUserWithEmailAndPassword","getAuth","signInWithEmailAndPassword","signInWithPopup","collection","doc","getDoc","getDocs","query","where","db","namespaced","state","authId","authUserUnsubscribe","authObserverUnsubscribe","getters","authUser","rootState","rootGetters","actions","initAuthentication","dispatch","commit","Promise","res","unsubscribe","onAuthStateChanged","user","registerUserWithEmailAndPassword","avatar","email","name","username","password","auth","result","id","uid","root","context","signInWithGoogle","provider","response","userRef","then","userDoc","exists","displayName","photoURL","signOut","fetchAuthUser","currentUser","userId","emoji","resource","handleUnsubscribe","fetchAuthUsersPosts","postsRef","posts","forEach","item","unsubscribeAuthUserSnapshot","mutations","setAuthId","setAuthUserUnsubscribe","setAuthObserverUnsubscribe"],"mappings":"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","sourcesContent":["import { GoogleAuthProvider, createUserWithEmailAndPassword, getAuth, signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\"\r\nimport {collection, doc, getDoc, getDocs, query, where} from \"firebase/firestore\"\r\n\r\nimport { db } from '../../main'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    authId: null,\r\n    authUserUnsubscribe: null,\r\n    authObserverUnsubscribe: null\r\n  },\r\n  getters: {\r\n    authUser: (state, getters, rootState, rootGetters) => {\r\n      return rootGetters['users/user'](state.authId)\r\n    },\r\n  },\r\n  actions: {\r\n    initAuthentication({state, dispatch, commit}) {\r\n      if (state.authObserverUnsubscribe) state.authObserverUnsubscribe()\r\n      return new Promise((res) => {\r\n        const unsubscribe = getAuth().onAuthStateChanged(async (user) => {\r\n          this.dispatch('auth/unsubscribeAuthUserSnapshot')\r\n          if (user) {\r\n            await this.dispatch('auth/fetchAuthUser')\r\n            res(user)\r\n          } else {\r\n            res(null)\r\n          }\r\n        })\r\n        commit(\"setAuthObserverUnsubscribe\", unsubscribe)\r\n      })\r\n    },\r\n\r\n    async registerUserWithEmailAndPassword({ dispatch }, {avatar = null, email, name, username, password }) {\r\n      const auth = getAuth();\r\n      const result = await createUserWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        password\r\n      )\r\n      await dispatch('users/createUser', { id: result.user.uid, email, name, username, avatar }, {root: true} )\r\n    },\r\n    signInWithEmailAndPassword(context, {email, password}) {\r\n      const auth = getAuth()\r\n      return signInWithEmailAndPassword(auth, email, password)\r\n    },\r\n    async signInWithGoogle({dispatch, commit}) {\r\n      const provider = new GoogleAuthProvider();\r\n      const auth = getAuth();\r\n      const response = await signInWithPopup(auth, provider)\r\n      const user = response.user;\r\n      const userRef = doc(db, 'users', user.uid)\r\n      await getDoc(userRef).then((userDoc) => {\r\n        if (!userDoc.exists)\r\n          return dispatch('users/createUser', {id: user.uid, email: user.email, name: user.displayName, username: user.email, avatar: user.photoURL}, {root: true} )\r\n        else \r\n          commit('setAuthId', user.uid)\r\n      })\r\n    },\r\n    async signOut({commit}) {\r\n      await getAuth().signOut()\r\n      commit('setAuthId', null)\r\n    },\r\n\r\n    fetchAuthUser: async ({ dispatch, state, commit }) => {\r\n      const userId = await getAuth().currentUser?.uid\r\n      if (!userId) return\r\n      await dispatch('fetchItem', { emoji:'🙋', resource: 'users', id: userId, handleUnsubscribe: (unsubscribe) => {\r\n        commit('setAuthUserUnsubscribe', unsubscribe)\r\n      }}, {root: true} )\r\n      commit('setAuthId', userId)\r\n    },\r\n    async fetchAuthUsersPosts ({ commit, state }) {\r\n      const postsRef = collection(db, \"posts\")\r\n      const posts = await getDocs(query(postsRef, where(\"userId\", \"==\", state.authId)))\r\n      posts.forEach(item => {\r\n        commit('setItem', { resource: 'posts', item }, {root: true})\r\n      })\r\n    },\r\n    async unsubscribeAuthUserSnapshot ({ state, commit }) {\r\n      if (state.authUserUnsubscribe) {\r\n        state.authUserUnsubscribe()\r\n        commit('setAuthUserUnsubscribe', null)        \r\n      }\r\n    }\r\n  },\r\n  mutations: {\r\n    setAuthId(state, id) {\r\n      state.authId = id\r\n    },\r\n    setAuthUserUnsubscribe (state, unsubscribe) {\r\n      state.authUserUnsubscribe = unsubscribe\r\n    },\r\n    setAuthObserverUnsubscribe (state, unsubscribe) {\r\n      state.authObserverUnsubscribe = unsubscribe\r\n    },\r\n  }\r\n}"]}]}