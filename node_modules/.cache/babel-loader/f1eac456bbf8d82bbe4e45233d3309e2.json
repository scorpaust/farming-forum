{"remainingRequest":"C:\\dev\\farming-forum\\node_modules\\babel-loader\\lib\\index.js!C:\\dev\\farming-forum\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\dev\\farming-forum\\src\\store\\modules\\posts.js","dependencies":[{"path":"C:\\dev\\farming-forum\\src\\store\\modules\\posts.js","mtime":1640088702136},{"path":"C:\\dev\\farming-forum\\babel.config.js","mtime":1638558199793},{"path":"C:\\dev\\farming-forum\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\dev\\farming-forum\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\dev\\farming-forum\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiQzpcXGRldlxcZmFybWluZy1mb3J1bVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWVcXGhlbHBlcnNcXGVzbVxcb2JqZWN0U3ByZWFkMi5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJDOlxcZGV2XFxmYXJtaW5nLWZvcnVtXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxhc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgeyBhcnJheVVuaW9uLCBjb2xsZWN0aW9uLCBkb2MsIGdldERvYywgaW5jcmVtZW50LCBzZXJ2ZXJUaW1lc3RhbXAsIHVwZGF0ZURvYywgd3JpdGVCYXRjaCB9IGZyb20gImZpcmViYXNlL2ZpcmVzdG9yZSI7CmltcG9ydCB7IG1ha2VGZXRjaEl0ZW1BY3Rpb24sIG1ha2VGZXRjaEl0ZW1zQWN0aW9uIH0gZnJvbSAnQC9oZWxwZXJzJzsKaW1wb3J0IHsgZGIgfSBmcm9tICIuLi8uLi9tYWluIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHsKICAgIGl0ZW1zOiBbXQogIH0sCiAgZ2V0dGVyczoge30sCiAgYWN0aW9uczogewogICAgY3JlYXRlUG9zdDogZnVuY3Rpb24gY3JlYXRlUG9zdChfcmVmLCBwb3N0KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgc3RhdGUsIHJvb3RTdGF0ZSwgYmF0Y2gsIHBvc3RSZWYsIHRocmVhZFJlZiwgdXNlclJlZiwgbmV3UG9zdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdCwgc3RhdGUgPSBfcmVmLnN0YXRlLCByb290U3RhdGUgPSBfcmVmLnJvb3RTdGF0ZTsKICAgICAgICAgICAgICAgIHBvc3QudXNlcklkID0gcm9vdFN0YXRlLmF1dGguYXV0aElkOwogICAgICAgICAgICAgICAgcG9zdC5wdWJsaXNoZWRBdCA9IHNlcnZlclRpbWVzdGFtcCgpOwogICAgICAgICAgICAgICAgYmF0Y2ggPSB3cml0ZUJhdGNoKGRiKTsKICAgICAgICAgICAgICAgIHBvc3RSZWYgPSBkb2MoY29sbGVjdGlvbihkYiwgInBvc3RzIikpOwogICAgICAgICAgICAgICAgdGhyZWFkUmVmID0gZG9jKGRiLCAidGhyZWFkcyIsIHBvc3QudGhyZWFkSWQpOwogICAgICAgICAgICAgICAgdXNlclJlZiA9IGRvYyhkYiwgInVzZXJzIiwgcm9vdFN0YXRlLmF1dGguYXV0aElkKTsKICAgICAgICAgICAgICAgIGJhdGNoLnNldChwb3N0UmVmLCBwb3N0KTsKICAgICAgICAgICAgICAgIGJhdGNoLnVwZGF0ZSh0aHJlYWRSZWYsIHsKICAgICAgICAgICAgICAgICAgcG9zdHM6IGFycmF5VW5pb24ocG9zdFJlZi5pZCksCiAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9yczogYXJyYXlVbmlvbihyb290U3RhdGUuYXV0aC5hdXRoSWQpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGJhdGNoLnVwZGF0ZSh1c2VyUmVmLCB7CiAgICAgICAgICAgICAgICAgIHBvc3RzQ291bnQ6IGluY3JlbWVudCgxKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gYmF0Y2guY29tbWl0KCk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RG9jKHBvc3RSZWYpOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgbmV3UG9zdCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBjb21taXQoJ3NldEl0ZW0nLCB7CiAgICAgICAgICAgICAgICAgIHJlc291cmNlOiAncG9zdHMnLAogICAgICAgICAgICAgICAgICBpdGVtOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG5ld1Bvc3QuZGF0YSgpKSwge30sIHsKICAgICAgICAgICAgICAgICAgICBpZDogbmV3UG9zdC5pZAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICByb290OiB0cnVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGNvbW1pdCgndGhyZWFkcy9hcHBlbmRQb3N0VG9UaHJlYWQnLCB7CiAgICAgICAgICAgICAgICAgIGNoaWxkSWQ6IG5ld1Bvc3QuaWQsCiAgICAgICAgICAgICAgICAgIHBhcmVudElkOiBwb3N0LnRocmVhZElkCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29tbWl0KCd0aHJlYWRzL2FwcGVuZENvbnRyaWJ1dG9yVG9UaHJlYWQnLCB7CiAgICAgICAgICAgICAgICAgIGNoaWxkSWQ6IHJvb3RTdGF0ZS5hdXRoLmF1dGhJZCwKICAgICAgICAgICAgICAgICAgcGFyZW50SWQ6IHBvc3QudGhyZWFkSWQKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgdXBkYXRlUG9zdDogZnVuY3Rpb24gdXBkYXRlUG9zdChfcmVmMiwgX3JlZjMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgc3RhdGUsIHJvb3RTdGF0ZSwgdGV4dCwgaWQsIHBvc3QsIHBvc3RSZWYsIHVwZGF0ZWRQb3N0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMi5jb21taXQsIHN0YXRlID0gX3JlZjIuc3RhdGUsIHJvb3RTdGF0ZSA9IF9yZWYyLnJvb3RTdGF0ZTsKICAgICAgICAgICAgICAgIHRleHQgPSBfcmVmMy50ZXh0LCBpZCA9IF9yZWYzLmlkOwogICAgICAgICAgICAgICAgcG9zdCA9IHsKICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dCwKICAgICAgICAgICAgICAgICAgZWRpdGVkOiB7CiAgICAgICAgICAgICAgICAgICAgYXQ6IHNlcnZlclRpbWVzdGFtcCgpLAogICAgICAgICAgICAgICAgICAgIGJ5OiByb290U3RhdGUuYXV0aC5hdXRoSWQsCiAgICAgICAgICAgICAgICAgICAgbW9kZXJhdGVkOiBmYWxzZQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcG9zdFJlZiA9IGRvYyhkYiwgJ3Bvc3RzJywgaWQpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZURvYyhwb3N0UmVmLCBwb3N0KTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIGdldERvYyhwb3N0UmVmKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgdXBkYXRlZFBvc3QgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIGNvbW1pdCgnc2V0SXRlbScsIHsKICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6ICdwb3N0cycsCiAgICAgICAgICAgICAgICAgIGl0ZW06IHVwZGF0ZWRQb3N0CiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZmV0Y2hQb3N0OiBtYWtlRmV0Y2hJdGVtQWN0aW9uKHsKICAgICAgZW1vamk6ICfwn5KsJywKICAgICAgcmVzb3VyY2U6ICdwb3N0cycKICAgIH0pLAogICAgZmV0Y2hQb3N0czogbWFrZUZldGNoSXRlbXNBY3Rpb24oewogICAgICBlbW9qaTogJ/CfkqwnLAogICAgICByZXNvdXJjZTogJ3Bvc3RzJwogICAgfSkKICB9LAogIG11dGF0aW9uczoge30KfTs="},{"version":3,"sources":["C:/dev/farming-forum/src/store/modules/posts.js"],"names":["arrayUnion","collection","doc","getDoc","increment","serverTimestamp","updateDoc","writeBatch","makeFetchItemAction","makeFetchItemsAction","db","namespaced","state","items","getters","actions","createPost","post","commit","rootState","userId","auth","authId","publishedAt","batch","postRef","threadRef","threadId","userRef","set","update","posts","id","contributors","postsCount","newPost","resource","item","data","root","childId","parentId","updatePost","text","edited","at","by","moderated","updatedPost","fetchPost","emoji","fetchPosts","mutations"],"mappings":"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","sourcesContent":["import { arrayUnion, collection, doc, getDoc, increment, serverTimestamp, updateDoc, writeBatch } from \"firebase/firestore\";\r\nimport { makeFetchItemAction, makeFetchItemsAction } from '@/helpers'\r\n\r\nimport { db } from \"../../main\"\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    items: []\r\n  },\r\n  getters: {},\r\n  actions: {\r\n    async createPost({commit, state, rootState}, post) {\r\n      post.userId  = rootState.auth.authId\r\n      post.publishedAt = serverTimestamp()\r\n      const batch = writeBatch(db);\r\n      const postRef = doc(collection(db, \"posts\"))\r\n      const threadRef = doc(db, \"threads\", post.threadId) \r\n      const userRef = doc(db, \"users\", rootState.auth.authId)\r\n      batch.set(postRef, post)\r\n      batch.update(threadRef, {\r\n        posts: arrayUnion(postRef.id),\r\n        contributors: arrayUnion(rootState.auth.authId)\r\n      })\r\n      batch.update(userRef, {\r\n        postsCount: increment(1)\r\n      })\r\n      await batch.commit();\r\n      const newPost = await getDoc(postRef)\r\n      commit('setItem', { resource: 'posts', item: {...newPost.data(), id: newPost.id} }, {root: true})\r\n      commit('threads/appendPostToThread', { childId: newPost.id, parentId: post.threadId }, {root: true})\r\n      commit('threads/appendContributorToThread', { childId: rootState.auth.authId, parentId: post.threadId }, {root: true})\r\n    },\r\n    async updatePost({commit, state, rootState}, { text, id}) {\r\n      const post = { \r\n        text,\r\n        edited: {\r\n          at: serverTimestamp(),\r\n          by: rootState.auth.authId,\r\n          moderated: false\r\n        }\r\n      }\r\n      const postRef = doc(db, 'posts', id)\r\n      await updateDoc(postRef, post)\r\n      const updatedPost = await getDoc(postRef)\r\n      commit('setItem', { resource: 'posts', item: updatedPost }, {root: true})\r\n    },\r\n    fetchPost: makeFetchItemAction({ emoji: '💬', resource: 'posts' }),\r\n    fetchPosts: makeFetchItemsAction({ emoji: '💬', resource: 'posts' })\r\n  },\r\n  mutations: {}\r\n}"]}]}